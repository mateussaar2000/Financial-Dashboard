<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Dashboard</title>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --light: #ecf0f1;
            --success: #27ae60;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: var(--primary);
            padding: 20px;
        }
        
        .dashboard {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            color: var(--primary);
            margin-bottom: 10px;
        }
        
        .date-info {
            color: var(--secondary);
            font-weight: 500;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            align-items: center;
        }
        
        .card-title {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--secondary);
        }
        
        .card-icon {
            background-color: var(--light);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary);
        }
        
        .card-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 5px;
        }
        
        .card-subtitle {
            font-size: 0.8rem;
            color: #7f8c8d;
        }
        
        .data-view {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        @media (max-width: 768px) {
            .data-view {
                grid-template-columns: 1fr;
            }
        }
        
        .chart-container, .table-container {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .section-title {
            margin-bottom: 15px;
            font-size: 1.2rem;
            color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .filter-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .filter-button {
            padding: 8px 15px;
            background-color: var(--light);
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }
        
        .filter-button:hover, .filter-button.active {
            background-color: var(--secondary);
            color: white;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9rem;
        }
        
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: var(--light);
            font-weight: 600;
            color: var(--primary);
            position: sticky;
            top: 0;
        }
        
        tr:hover {
            background-color: #f5f7fa;
        }
        
        .table-container {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .positive {
            color: var(--success);
        }
        
        .negative {
            color: var(--accent);
        }
        
        .asset-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
            color: white;
            margin-right: 10px;
        }
        
        .asset-info {
            display: flex;
            align-items: center;
        }
        
        .asset-details {
            display: flex;
            flex-direction: column;
        }
        
        .asset-symbol {
            font-weight: 600;
        }
        
        .asset-name {
            font-size: 0.8rem;
            color: #7f8c8d;
        }
        
        .search-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        .search-input {
            width: 100%;
            padding: 10px 15px 10px 40px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 0.9rem;
        }
        
        .search-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #7f8c8d;
        }
        
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 0.8rem;
            z-index: 100;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <header>
            <h1>Portfolio Dashboard</h1>
            <p class="date-info">Data as of October 16, 2018</p>
        </header>
        
        <div class="summary-cards">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">TOTAL BOOK VALUE</div>
                    <div class="card-icon">$</div>
                </div>
                <div class="card-value" id="total-book-value">$0.00</div>
                <div class="card-subtitle">Across all assets</div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">TOTAL MARKET VALUE</div>
                    <div class="card-icon">$</div>
                </div>
                <div class="card-value" id="total-market-value">$0.00</div>
                <div class="card-subtitle">Current valuation</div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">PORTFOLIO GAIN/LOSS</div>
                    <div class="card-icon">%</div>
                </div>
                <div class="card-value" id="portfolio-gain">0.00%</div>
                <div class="card-subtitle">Total return</div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">ASSET COUNT</div>
                    <div class="card-icon">#</div>
                </div>
                <div class="card-value" id="asset-count">0</div>
                <div class="card-subtitle">Diversification</div>
            </div>
        </div>
        
        <div class="filter-controls">
            <button class="filter-button active" data-filter="all">All Assets</button>
            <button class="filter-button" data-filter="Equities">Equities</button>
            <button class="filter-button" data-filter="Fixed Income">Fixed Income</button>
            <button class="filter-button" data-filter="Others">Others</button>
        </div>
        
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Search for symbol, name, or category...">
            <span class="search-icon">üîç</span>
        </div>
        
        <div class="data-view">
            <div class="chart-container">
                <div class="section-title">Asset Allocation</div>
                <canvas id="allocation-chart"></canvas>
            </div>
            
            <div class="chart-container">
                <div class="section-title">Asset Class Performance</div>
                <canvas id="performance-chart"></canvas>
            </div>
        </div>
        
        <div class="table-container">
            <div class="section-title">Portfolio Holdings</div>
            <table id="holdings-table">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Name</th>
                        <th>Asset Class</th>
                        <th>Category</th>
                        <th>Quantity</th>
                        <th>Book Value</th>
                        <th>Market Value</th>
                        <th>Gain/Loss</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Table rows will be populated with JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
    
    <div class="tooltip" id="tooltip"></div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Portfolio data from your table
        const portfolioData = [
            { date: '2018-10-16', symbol: 'MMM', name: '3M COMPANY', assetClass: 'Equities', category: 'US Stocks', institution: 'Questrade', accountId: '5674281', quantity: 315.232, currency: 'USD', bookValue: 225384.02, marketValue: 239841.00 },
            { date: '2018-10-16', symbol: 'ABT', name: 'ABBOTT LABORATORIES', assetClass: 'Equities', category: 'US Stocks', institution: 'Wealthsimple', accountId: '4637281', quantity: 129, currency: 'USD', bookValue: 124047.78, marketValue: 224201.03 },
            { date: '2018-10-16', symbol: 'AGQQ101', name: 'ALGONQUIN DEFENSIVE INCOME', assetClass: 'Fixed Income', category: 'NBCN', institution: 'NBCN', accountId: '2781923', quantity: 21815.922, currency: 'CAD', bookValue: 250000.00, marketValue: 262271.01 },
            { date: '2018-10-16', symbol: 'BABA', name: 'ALIBABA GROUP', assetClass: 'Equities', category: 'US Stocks', institution: 'Questrade', accountId: '2718391', quantity: 50, currency: 'USD', bookValue: 60914.50, marketValue: 70208.00 },
            { date: '2018-10-16', symbol: 'ATD.B', name: 'ALIMENTATION COUCHE-TARD', assetClass: 'Equities', category: 'Canadian Stocks', institution: 'CIBC (Wood Gundy)', accountId: '1673781', quantity: 1815.223, currency: 'CAD', bookValue: 71036.10, marketValue: 80178.41 },
            { date: '2018-10-16', symbol: 'NBC101', name: 'ALT HI CPRFU', assetClass: 'Others', category: 'AGF', institution: 'AGF', accountId: '6372819', quantity: 4900, currency: 'USD', bookValue: 15119.78, marketValue: 15119.78 },
            { date: '2018-10-16', symbol: 'NBC101', name: 'ALT HI CPRFU', assetClass: 'Others', category: 'NBCN', institution: 'NBCN', accountId: '6378293', quantity: 197642.89, currency: 'USD', bookValue: 197642.89, marketValue: 197642.89 },
            { date: '2018-10-16', symbol: 'ALA.PR.U', name: 'ALTAGAS LTD C', assetClass: 'Fixed Income', category: 'Preferred Stocks', institution: 'CIBC (Wood Gundy)', accountId: '7483920', quantity: 1400, currency: 'CAD', bookValue: 35000.00, marketValue: 34972.00 },
            { date: '2018-10-16', symbol: 'ALA.PR.K', name: 'ALTAGAS LTD C', assetClass: 'Fixed Income', category: 'Preferred Stocks', institution: 'CIBC (Wood Gundy)', accountId: '4637289', quantity: 51815, currency: 'CAD', bookValue: 50000.00, marketValue: 48220.00 },
            { date: '2018-10-16', symbol: 'ARX', name: 'ARC RESOURCES', assetClass: 'Equities', category: 'Canadian Stocks', institution: 'CIBC (Wood Gundy)', accountId: '3627389', quantity: 1815.532, currency: 'CAD', bookValue: 88187.71, marketValue: 7750.58 },
            { date: '2018-10-16', symbol: 'ICC400W', name: 'Avenue Living REIT', assetClass: 'Others', category: 'NBCN', institution: 'NBCN', accountId: '3627818', quantity: 980, currency: 'CAD', bookValue: 350828.82, marketValue: 362736.82 }
        ];

        // DOM elements
        const totalBookValueEl = document.getElementById('total-book-value');
        const totalMarketValueEl = document.getElementById('total-market-value');
        const portfolioGainEl = document.getElementById('portfolio-gain');
        const assetCountEl = document.getElementById('asset-count');
        const allocationChartEl = document.getElementById('allocation-chart');
        const performanceChartEl = document.getElementById('performance-chart');
        const holdingsTableEl = document.getElementById('holdings-table').querySelector('tbody');
        const filterButtons = document.querySelectorAll('.filter-button');
        const searchInput = document.querySelector('.search-input');
        const tooltipEl = document.getElementById('tooltip');

        // Initialize charts and tables
        let allocationChart, performanceChart;
        let currentFilter = 'all';
        let currentSearch = '';

        // Helper functions
        function formatCurrency(value, currency = 'USD') {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: currency,
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value);
        }

        function formatPercentage(value) {
            return new Intl.NumberFormat('en-US', {
                style: 'percent',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(value / 100);
        }

        function calculateSummary() {
            const totalBookValue = portfolioData.reduce((sum, item) => sum + item.bookValue, 0);
            const totalMarketValue = portfolioData.reduce((sum, item) => sum + item.marketValue, 0);
            const portfolioGain = ((totalMarketValue - totalBookValue) / totalBookValue) * 100;
            const assetCount = new Set(portfolioData.map(item => item.symbol)).size;

            totalBookValueEl.textContent = formatCurrency(totalBookValue);
            totalMarketValueEl.textContent = formatCurrency(totalMarketValue);
            portfolioGainEl.textContent = formatPercentage(portfolioGain);
            portfolioGainEl.className = portfolioGain >= 0 ? 'card-value positive' : 'card-value negative';
            assetCountEl.textContent = assetCount;
        }

        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        function initAllocationChart() {
            // Group by asset class
            const assetClassData = {};
            portfolioData.forEach(item => {
                if (!assetClassData[item.assetClass]) {
                    assetClassData[item.assetClass] = 0;
                }
                assetClassData[item.assetClass] += item.marketValue;
            });

            const labels = Object.keys(assetClassData);
            const data = Object.values(assetClassData);
            const backgroundColors = labels.map(() => getRandomColor());

            allocationChart = new Chart(allocationChartEl, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'right',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const percentage = (context.raw / data.reduce((a, b) => a + b, 0)) * 100;
                                    return `${label}: ${formatCurrency(value)} (${percentage.toFixed(2)}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function initPerformanceChart() {
            // Calculate performance by asset class
            const assetClassPerformance = {};
            portfolioData.forEach(item => {
                if (!assetClassPerformance[item.assetClass]) {
                    assetClassPerformance[item.assetClass] = {
                        bookValue: 0,
                        marketValue: 0
                    };
                }
                assetClassPerformance[item.assetClass].bookValue += item.bookValue;
                assetClassPerformance[item.assetClass].marketValue += item.marketValue;
            });

            // Calculate percentage gains
            const labels = Object.keys(assetClassPerformance);
            const data = labels.map(label => {
                const { bookValue, marketValue } = assetClassPerformance[label];
                return ((marketValue - bookValue) / bookValue) * 100;
            });

            const backgroundColors = data.map(value => 
                value >= 0 ? 'rgba(39, 174, 96, 0.6)' : 'rgba(231, 76, 60, 0.6)'
            );

            performanceChart = new Chart(performanceChartEl, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Performance (%)',
                        data: data,
                        backgroundColor: backgroundColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    indexAxis: 'y',
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw || 0;
                                    return `Performance: ${value.toFixed(2)}%`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        },
                        y: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        function populateTable(filteredData = portfolioData) {
            // Clear existing rows
            holdingsTableEl.innerHTML = '';
            
            // Add rows for filtered data
            filteredData.forEach(item => {
                const row = document.createElement('tr');
                
                // Calculate gain/loss
                const gainLoss = item.marketValue - item.bookValue;
                const gainLossPercentage = (gainLoss / item.bookValue) * 100;
                
                // Generate asset color based on asset class
                let assetColor;
                if (item.assetClass === 'Equities') {
                    assetColor = '#3498db';
                } else if (item.assetClass === 'Fixed Income') {
                    assetColor = '#27ae60';
                } else {
                    assetColor = '#e67e22';
                }
                
                row.innerHTML = `
                    <td>
                        <div class="asset-info">
                            <div class="asset-icon" style="background-color: ${assetColor};">${item.symbol.charAt(0)}</div>
                            <span>${item.symbol}</span>
                        </div>
                    </td>
                    <td>${item.name}</td>
                    <td>${item.assetClass}</td>
                    <td>${item.category}</td>
                    <td>${item.quantity.toLocaleString()} ${item.currency}</td>
                    <td>${formatCurrency(item.bookValue, item.currency)}</td>
                    <td>${formatCurrency(item.marketValue, item.currency)}</td>
                    <td class="${gainLoss >= 0 ? 'positive' : 'negative'}">
                        ${formatCurrency(gainLoss, item.currency)} (${gainLossPercentage.toFixed(2)}%)
                    </td>
                `;
                
                // Add hover effect for tooltip
                row.addEventListener('mouseover', (e) => {
                    tooltipEl.style.opacity = '1';
                    tooltipEl.innerHTML = `
                        <strong>${item.name} (${item.symbol})</strong><br>
                        Institution: ${item.institution}<br>
                        Account ID: ${item.accountId}<br>
                        Quantity: ${item.quantity.toLocaleString()} ${item.currency}<br>
                        Book Value: ${formatCurrency(item.bookValue, item.currency)}<br>
                        Market Value: ${formatCurrency(item.marketValue, item.currency)}<br>
                        Gain/Loss: ${formatCurrency(gainLoss, item.currency)} (${gainLossPercentage.toFixed(2)}%)
                    `;
                    tooltipEl.style.left = `${e.pageX + 10}px`;
                    tooltipEl.style.top = `${e.pageY + 10}px`;
                });
                
                row.addEventListener('mouseleave', () => {
                    tooltipEl.style.opacity = '0';
                });
                
                row.addEventListener('mousemove', (e) => {
                    tooltipEl.style.left = `${e.pageX + 10}px`;
                    tooltipEl.style.top = `${e.pageY + 10}px`;
                });
                
                holdingsTableEl.appendChild(row);
            });
        }

        function filterData() {
            let filteredData = portfolioData;
            
            // Apply asset class filter
            if (currentFilter !== 'all') {
                filteredData = filteredData.filter(item => item.assetClass.includes(currentFilter));
            }
            
            // Apply search filter
            if (currentSearch.trim() !== '') {
                const searchTerm = currentSearch.toLowerCase().trim();
                filteredData = filteredData.filter(item => 
                    item.symbol.toLowerCase().includes(searchTerm) || 
                    item.name.toLowerCase().includes(searchTerm) || 
                    item.category.toLowerCase().includes(searchTerm) ||
                    item.assetClass.toLowerCase().includes(searchTerm)
                );
            }
            
            return filteredData;
        }

        function updateDashboard() {
            const filteredData = filterData();
            populateTable(filteredData);
        }

        // Event listeners
        filterButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Update active state
                filterButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // Update filter
                currentFilter = button.getAttribute('data-filter');
                updateDashboard();
            });
        });

        searchInput.addEventListener('input', (e) => {
            currentSearch = e.target.value;
            updateDashboard();
        });

        // Initialize dashboard
        function initDashboard() {
            calculateSummary();
            initAllocationChart();
            initPerformanceChart();
            populateTable();
        }

        // Start the dashboard
        initDashboard();
    </script>
</body>
</html>
